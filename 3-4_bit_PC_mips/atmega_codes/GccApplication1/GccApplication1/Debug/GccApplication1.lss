
GccApplication1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000214  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000268  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000298  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000002d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006ce  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005ba  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000367  00000000  00000000  00000f7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000012e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000383  00000000  00000000  00001308  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000198  00000000  00000000  0000168b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  00001823  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 3e 00 	call	0x7c	; 0x7c <main>
  74:	0c 94 08 01 	jmp	0x210	; 0x210 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <main>:

unsigned char memArr[32];

int main(void)
{
	MCUCSR|=(1<<JTD);
  7c:	84 b7       	in	r24, 0x34	; 52
  7e:	80 68       	ori	r24, 0x80	; 128
  80:	84 bf       	out	0x34, r24	; 52
	MCUCSR|=(1<<JTD);
  82:	84 b7       	in	r24, 0x34	; 52
  84:	80 68       	ori	r24, 0x80	; 128
  86:	84 bf       	out	0x34, r24	; 52
	
	
	DDRA=0XFF;
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	8a bb       	out	0x1a, r24	; 26
	DDRB=0x00;
  8c:	17 ba       	out	0x17, r1	; 23
	DDRC=0x00;
  8e:	14 ba       	out	0x14, r1	; 20
	DDRD=0x00;
  90:	11 ba       	out	0x11, r1	; 17
	// opc BH
	// out CL
	// zero A0


	PORTA = 0b00000001;
  92:	91 e0       	ldi	r25, 0x01	; 1
  94:	9b bb       	out	0x1b, r25	; 27
	PORTB = 0b11111111;
  96:	88 bb       	out	0x18, r24	; 24
	PORTD = 0b00001111;
  98:	8f e0       	ldi	r24, 0x0F	; 15
  9a:	82 bb       	out	0x12, r24	; 18
	PORTC = 0b00001111;
  9c:	85 bb       	out	0x15, r24	; 21

	int reg1;
	int reg2;
	int operation;
	int dataOutputReg = 0x00;
  9e:	a0 e0       	ldi	r26, 0x00	; 0
  a0:	b0 e0       	ldi	r27, 0x00	; 0
	int beqf;
	int bneqf;

	while (1)
	{
		operation = PIND%16;
  a2:	60 b3       	in	r22, 0x10	; 16
  a4:	6f 70       	andi	r22, 0x0F	; 15
  a6:	70 e0       	ldi	r23, 0x00	; 0
		shamt = (PIND >> 4);
  a8:	e0 b3       	in	r30, 0x10	; 16
  aa:	e2 95       	swap	r30
  ac:	ef 70       	andi	r30, 0x0F	; 15
  ae:	f0 e0       	ldi	r31, 0x00	; 0
		
		reg1 = PINB%16;
  b0:	26 b3       	in	r18, 0x16	; 22
  b2:	2f 70       	andi	r18, 0x0F	; 15
  b4:	30 e0       	ldi	r19, 0x00	; 0
		reg2 =  (PINB >> 4);
  b6:	46 b3       	in	r20, 0x16	; 22
  b8:	42 95       	swap	r20
  ba:	4f 70       	andi	r20, 0x0F	; 15
  bc:	50 e0       	ldi	r21, 0x00	; 0
		
		int c = PINC;
  be:	93 b3       	in	r25, 0x13	; 19
		ALUsrc = (c & 0b0001);
		beqf = (c & 0b0010)>>1;
  c0:	09 2f       	mov	r16, r25
  c2:	02 70       	andi	r16, 0x02	; 2
  c4:	10 e0       	ldi	r17, 0x00	; 0
  c6:	15 95       	asr	r17
  c8:	07 95       	ror	r16
		bneqf = (c & 0b0100)>>2;
  ca:	c9 2f       	mov	r28, r25
  cc:	c4 70       	andi	r28, 0x04	; 4
  ce:	d0 e0       	ldi	r29, 0x00	; 0
  d0:	d5 95       	asr	r29
  d2:	c7 95       	ror	r28
  d4:	d5 95       	asr	r29
  d6:	c7 95       	ror	r28
		
		if(ALUsrc==1) reg2 = shamt;
  d8:	90 fd       	sbrc	r25, 0
  da:	af 01       	movw	r20, r30

		if (operation == add || operation ==addi || operation == lw || operation == sw)
  dc:	6d 30       	cpi	r22, 0x0D	; 13
  de:	71 05       	cpc	r23, r1
  e0:	49 f0       	breq	.+18     	; 0xf4 <main+0x78>
  e2:	63 30       	cpi	r22, 0x03	; 3
  e4:	71 05       	cpc	r23, r1
  e6:	31 f0       	breq	.+12     	; 0xf4 <main+0x78>
  e8:	65 30       	cpi	r22, 0x05	; 5
  ea:	71 05       	cpc	r23, r1
  ec:	19 f0       	breq	.+6      	; 0xf4 <main+0x78>
  ee:	61 30       	cpi	r22, 0x01	; 1
  f0:	71 05       	cpc	r23, r1
  f2:	71 f4       	brne	.+28     	; 0x110 <main+0x94>
		{
			dataOutputReg = (reg1 + reg2)%16;
  f4:	24 0f       	add	r18, r20
  f6:	35 1f       	adc	r19, r21
  f8:	2f 70       	andi	r18, 0x0F	; 15
  fa:	30 78       	andi	r19, 0x80	; 128
  fc:	33 23       	and	r19, r19
  fe:	34 f4       	brge	.+12     	; 0x10c <main+0x90>
 100:	21 50       	subi	r18, 0x01	; 1
 102:	31 09       	sbc	r19, r1
 104:	20 6f       	ori	r18, 0xF0	; 240
 106:	3f 6f       	ori	r19, 0xFF	; 255
 108:	2f 5f       	subi	r18, 0xFF	; 255
 10a:	3f 4f       	sbci	r19, 0xFF	; 255
 10c:	d9 01       	movw	r26, r18
 10e:	5a c0       	rjmp	.+180    	; 0x1c4 <main+0x148>
		}
		else if (operation == sub || operation == subi || operation == beq || operation == bneq)
 110:	6e 30       	cpi	r22, 0x0E	; 14
 112:	71 05       	cpc	r23, r1
 114:	49 f0       	breq	.+18     	; 0x128 <main+0xac>
 116:	64 30       	cpi	r22, 0x04	; 4
 118:	71 05       	cpc	r23, r1
 11a:	31 f0       	breq	.+12     	; 0x128 <main+0xac>
 11c:	6c 30       	cpi	r22, 0x0C	; 12
 11e:	71 05       	cpc	r23, r1
 120:	19 f0       	breq	.+6      	; 0x128 <main+0xac>
 122:	6a 30       	cpi	r22, 0x0A	; 10
 124:	71 05       	cpc	r23, r1
 126:	81 f4       	brne	.+32     	; 0x148 <main+0xcc>
		{
			dataOutputReg = (reg1 - reg2 +16 )%16;
 128:	24 1b       	sub	r18, r20
 12a:	35 0b       	sbc	r19, r21
 12c:	20 5f       	subi	r18, 0xF0	; 240
 12e:	3f 4f       	sbci	r19, 0xFF	; 255
 130:	2f 70       	andi	r18, 0x0F	; 15
 132:	30 78       	andi	r19, 0x80	; 128
 134:	33 23       	and	r19, r19
 136:	34 f4       	brge	.+12     	; 0x144 <main+0xc8>
 138:	21 50       	subi	r18, 0x01	; 1
 13a:	31 09       	sbc	r19, r1
 13c:	20 6f       	ori	r18, 0xF0	; 240
 13e:	3f 6f       	ori	r19, 0xFF	; 255
 140:	2f 5f       	subi	r18, 0xFF	; 255
 142:	3f 4f       	sbci	r19, 0xFF	; 255
 144:	d9 01       	movw	r26, r18
 146:	3e c0       	rjmp	.+124    	; 0x1c4 <main+0x148>
			
		}
		else if (operation == and || operation == andi)
 148:	6b 30       	cpi	r22, 0x0B	; 11
 14a:	71 05       	cpc	r23, r1
 14c:	19 f0       	breq	.+6      	; 0x154 <main+0xd8>
 14e:	62 30       	cpi	r22, 0x02	; 2
 150:	71 05       	cpc	r23, r1
 152:	21 f4       	brne	.+8      	; 0x15c <main+0xe0>
		{
			dataOutputReg = reg1 & reg2;
 154:	da 01       	movw	r26, r20
 156:	a2 23       	and	r26, r18
 158:	b3 23       	and	r27, r19
 15a:	34 c0       	rjmp	.+104    	; 0x1c4 <main+0x148>
		}
		else if (operation == or || operation == ori)
 15c:	cb 01       	movw	r24, r22
 15e:	07 97       	sbiw	r24, 0x07	; 7
 160:	02 97       	sbiw	r24, 0x02	; 2
 162:	20 f4       	brcc	.+8      	; 0x16c <main+0xf0>
		{
			dataOutputReg = reg1 | reg2;
 164:	da 01       	movw	r26, r20
 166:	a2 2b       	or	r26, r18
 168:	b3 2b       	or	r27, r19
 16a:	2c c0       	rjmp	.+88     	; 0x1c4 <main+0x148>
		}
		else if (operation == nor)
 16c:	6f 30       	cpi	r22, 0x0F	; 15
 16e:	71 05       	cpc	r23, r1
 170:	31 f4       	brne	.+12     	; 0x17e <main+0x102>
		{
			dataOutputReg = reg1 | reg2;
 172:	24 2b       	or	r18, r20
 174:	35 2b       	or	r19, r21
			dataOutputReg = (dataOutputReg ^ 15);
 176:	d9 01       	movw	r26, r18
 178:	8f e0       	ldi	r24, 0x0F	; 15
 17a:	a8 27       	eor	r26, r24
 17c:	23 c0       	rjmp	.+70     	; 0x1c4 <main+0x148>
		}
		else if (operation == sll)
 17e:	66 30       	cpi	r22, 0x06	; 6
 180:	71 05       	cpc	r23, r1
 182:	89 f4       	brne	.+34     	; 0x1a6 <main+0x12a>
		{
			dataOutputReg = reg1 << reg2;
 184:	02 c0       	rjmp	.+4      	; 0x18a <main+0x10e>
 186:	22 0f       	add	r18, r18
 188:	33 1f       	adc	r19, r19
 18a:	4a 95       	dec	r20
 18c:	e2 f7       	brpl	.-8      	; 0x186 <main+0x10a>
			dataOutputReg%=16;
 18e:	2f 70       	andi	r18, 0x0F	; 15
 190:	30 78       	andi	r19, 0x80	; 128
 192:	33 23       	and	r19, r19
 194:	34 f4       	brge	.+12     	; 0x1a2 <main+0x126>
 196:	21 50       	subi	r18, 0x01	; 1
 198:	31 09       	sbc	r19, r1
 19a:	20 6f       	ori	r18, 0xF0	; 240
 19c:	3f 6f       	ori	r19, 0xFF	; 255
 19e:	2f 5f       	subi	r18, 0xFF	; 255
 1a0:	3f 4f       	sbci	r19, 0xFF	; 255
 1a2:	d9 01       	movw	r26, r18
 1a4:	0f c0       	rjmp	.+30     	; 0x1c4 <main+0x148>
		}
		else if (operation == srl)
 1a6:	61 15       	cp	r22, r1
 1a8:	71 05       	cpc	r23, r1
 1aa:	39 f4       	brne	.+14     	; 0x1ba <main+0x13e>
		{
			dataOutputReg = reg1 >> reg2;
 1ac:	d9 01       	movw	r26, r18
 1ae:	02 c0       	rjmp	.+4      	; 0x1b4 <main+0x138>
 1b0:	b5 95       	asr	r27
 1b2:	a7 95       	ror	r26
 1b4:	4a 95       	dec	r20
 1b6:	e2 f7       	brpl	.-8      	; 0x1b0 <main+0x134>
 1b8:	05 c0       	rjmp	.+10     	; 0x1c4 <main+0x148>
		}
		else if (operation == j)
 1ba:	69 30       	cpi	r22, 0x09	; 9
 1bc:	71 05       	cpc	r23, r1
 1be:	11 f4       	brne	.+4      	; 0x1c4 <main+0x148>
		{
			dataOutputReg = 0;
 1c0:	a0 e0       	ldi	r26, 0x00	; 0
 1c2:	b0 e0       	ldi	r27, 0x00	; 0
		}

		if (dataOutputReg%16 == 0)
 1c4:	cd 01       	movw	r24, r26
 1c6:	8f 70       	andi	r24, 0x0F	; 15
 1c8:	99 27       	eor	r25, r25
 1ca:	89 2b       	or	r24, r25
 1cc:	19 f4       	brne	.+6      	; 0x1d4 <main+0x158>
		{
			zeroFlag = 1;
 1ce:	41 e0       	ldi	r20, 0x01	; 1
 1d0:	50 e0       	ldi	r21, 0x00	; 0
 1d2:	02 c0       	rjmp	.+4      	; 0x1d8 <main+0x15c>
		}
		else
		{
			zeroFlag = 0;
 1d4:	40 e0       	ldi	r20, 0x00	; 0
 1d6:	50 e0       	ldi	r21, 0x00	; 0
		}
		
		zeroFlag = (zeroFlag&beqf)|((!zeroFlag)&bneqf);
 1d8:	9a 01       	movw	r18, r20
 1da:	20 23       	and	r18, r16
 1dc:	31 23       	and	r19, r17
 1de:	81 e0       	ldi	r24, 0x01	; 1
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	45 2b       	or	r20, r21
 1e4:	11 f0       	breq	.+4      	; 0x1ea <main+0x16e>
 1e6:	80 e0       	ldi	r24, 0x00	; 0
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	8c 23       	and	r24, r28
 1ec:	9d 23       	and	r25, r29
 1ee:	82 2b       	or	r24, r18
 1f0:	93 2b       	or	r25, r19
		
		/*PORTC = 0x00;*/
		PORTA = dataOutputReg | (zeroFlag<<4);
 1f2:	82 95       	swap	r24
 1f4:	92 95       	swap	r25
 1f6:	90 7f       	andi	r25, 0xF0	; 240
 1f8:	98 27       	eor	r25, r24
 1fa:	80 7f       	andi	r24, 0xF0	; 240
 1fc:	98 27       	eor	r25, r24
 1fe:	8a 2b       	or	r24, r26
 200:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 202:	83 ec       	ldi	r24, 0xC3	; 195
 204:	99 e0       	ldi	r25, 0x09	; 9
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <main+0x18a>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <main+0x190>
 20c:	00 00       	nop
 20e:	49 cf       	rjmp	.-366    	; 0xa2 <main+0x26>

00000210 <_exit>:
 210:	f8 94       	cli

00000212 <__stop_program>:
 212:	ff cf       	rjmp	.-2      	; 0x212 <__stop_program>
